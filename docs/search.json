[
  {
    "objectID": "documentation/index.html",
    "href": "documentation/index.html",
    "title": "TileDB Vector Search",
    "section": "",
    "text": "TileDB Vector Search\nTileDB-Vector-Search is a C++ library and Python API for vector search built on top of the TileDB Storage Engine.\n\n\nQuick Links\n\nBuild Instructions\nTileDB Documentation\nPython API reference\n\n\n\nQuick Installation\nTileDB-Vector-Search is available from either PyPI with pip:\npip install tiledb-vector-search\nor from the tiledb conda channel with conda or mamba (Pending ðŸš§):\nconda install -c tiledb tiledb-vector-search\n\n\nContributing\nWe welcome contributions. Please see Building for development-build instructions. For large new features, please open an issue to discuss goals and approach in order to ensure a smooth PR integration and review process. All contributions must be licensed under the repositoryâ€™s MIT License."
  },
  {
    "objectID": "documentation/Building.html",
    "href": "documentation/Building.html",
    "title": "Building From Source",
    "section": "",
    "text": "TileDB Vector Search can be built from source. For information on dependencies, see below.\n\n\npip install git+https://github.com/TileDB-Inc/TileDB-Vector-Search.git#subdirectory=apis/python\n\n\n\ncd apis/python\npip install ."
  },
  {
    "objectID": "documentation/Building.html#installation-from-github-with-pip",
    "href": "documentation/Building.html#installation-from-github-with-pip",
    "title": "Building From Source",
    "section": "",
    "text": "pip install git+https://github.com/TileDB-Inc/TileDB-Vector-Search.git#subdirectory=apis/python"
  },
  {
    "objectID": "documentation/Building.html#installation-from-a-local-checkout",
    "href": "documentation/Building.html#installation-from-a-local-checkout",
    "title": "Building From Source",
    "section": "",
    "text": "cd apis/python\npip install ."
  },
  {
    "objectID": "documentation/Building.html#linux",
    "href": "documentation/Building.html#linux",
    "title": "Building From Source",
    "section": "Linux",
    "text": "Linux\nThere are several dependencies needed, for Ubuntu you can install via:\napt-get openblas-dev build-essentials cmake3\nTo build the python API after you have the dependencies, use pip:\ncd apis/python\npip install ."
  },
  {
    "objectID": "documentation/Building.html#docker",
    "href": "documentation/Building.html#docker",
    "title": "Building From Source",
    "section": "Docker",
    "text": "Docker\nA docker image is also provided for simplicity:\ndocker build -t tiledb/tiledb-vector-search .\nYou run the example docker image which provides the python package with:\ndocker run --rm tiledb/tiledb-vector-search"
  },
  {
    "objectID": "documentation/reference/index.FlatIndex.html",
    "href": "documentation/reference/index.FlatIndex.html",
    "title": "index.FlatIndex",
    "section": "",
    "text": "vector_search.index.FlatIndex(self, uri, dtype, parts_name='parts.tdb')\nOpen a flat index\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nuri\nstr\nURI of datataset\nrequired\n\n\ndtype\nnumpy.dtype\ndatatype float32 or uint8\nrequired\n\n\nparts_name\nstr\nOptional name of partitions\n'parts.tdb'\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nquery\nOpen a flat index\n\n\n\n\n\nvector_search.index.FlatIndex.query(self, targets, k=10, nqueries=10, nthreads=8, nprobe=1)\nOpen a flat index\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntargets\nnumpy.ndarray\nND Array of query targets\nrequired\n\n\nk\nint\nNumber of top results to return per target\n10\n\n\nnqueries\nint\nNumber of queries\n10\n\n\nnthreads\nint\nNumber of threads to use for queyr\n8\n\n\nnprobe\nint\nnumber of probes\n1"
  },
  {
    "objectID": "documentation/reference/index.FlatIndex.html#parameters",
    "href": "documentation/reference/index.FlatIndex.html#parameters",
    "title": "index.FlatIndex",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nuri\nstr\nURI of datataset\nrequired\n\n\ndtype\nnumpy.dtype\ndatatype float32 or uint8\nrequired\n\n\nparts_name\nstr\nOptional name of partitions\n'parts.tdb'"
  },
  {
    "objectID": "documentation/reference/index.FlatIndex.html#methods",
    "href": "documentation/reference/index.FlatIndex.html#methods",
    "title": "index.FlatIndex",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nquery\nOpen a flat index\n\n\n\n\n\nvector_search.index.FlatIndex.query(self, targets, k=10, nqueries=10, nthreads=8, nprobe=1)\nOpen a flat index\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntargets\nnumpy.ndarray\nND Array of query targets\nrequired\n\n\nk\nint\nNumber of top results to return per target\n10\n\n\nnqueries\nint\nNumber of queries\n10\n\n\nnthreads\nint\nNumber of threads to use for queyr\n8\n\n\nnprobe\nint\nnumber of probes\n1"
  },
  {
    "objectID": "documentation/reference/index.html",
    "href": "documentation/reference/index.html",
    "title": "Python",
    "section": "",
    "text": "index.Index\n\n\n\nindex.FlatIndex\nOpen a flat index\n\n\nindex.IVFFlatIndex\nOpen a IVF Flat index\n\n\ningestion"
  },
  {
    "objectID": "documentation/reference/index.html#tiledb.vector_search",
    "href": "documentation/reference/index.html#tiledb.vector_search",
    "title": "Python",
    "section": "",
    "text": "index.Index\n\n\n\nindex.FlatIndex\nOpen a flat index\n\n\nindex.IVFFlatIndex\nOpen a IVF Flat index\n\n\ningestion"
  },
  {
    "objectID": "documentation/reference/ingestion.html",
    "href": "documentation/reference/ingestion.html",
    "title": "ingestion",
    "section": "",
    "text": "vector_search.ingestion\n\n\n\n\n\nName\nDescription\n\n\n\n\ningest\nIngest vectors into TileDB.\n\n\n\n\n\nvector_search.ingestion.ingest(index_type, array_uri, source_uri, source_type, *, config=None, namespace=None, size=-1, partitions=-1, copy_centroids_uri=None, training_sample_size=-1, workers=-1, verbose=False, trace_id=None, mode=Mode.LOCAL)\nIngest vectors into TileDB.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nindex_type\nstr\nType of vector index (FLAT, IVF_FLAT)\nrequired\n\n\narray_uri\nstr\nVector array URI\nrequired\n\n\nsource_uri\nstr\nData source URI\nrequired\n\n\nsource_type\nstr\nType of the source data\nrequired\n\n\nconfig\n\nconfig dictionary, defaults to None\nNone\n\n\nnamespace\ntyping.Optional[str]\nTileDB-Cloud namespace, defaults to None\nNone\n\n\nsize\nint\nNumber of input vectors, if not provided use the full size of the input dataset\n-1\n\n\npartitions\nint\nNumber of partitions to load the data with, if not provided, is auto-configured based on the dataset size\n-1\n\n\ncopy_centroids_uri\nstr\nTileDB array URI to copy centroids from, if not provided, centroids are build running kmeans\nNone\n\n\ntraining_sample_size\nint\nvector sample size to train centroids with, if not provided, is auto-configured based on the dataset size\n-1\n\n\nworkers\nint\nnumber of workers for vector ingestion, if not provided, is auto-configured based on the dataset size\n-1\n\n\nverbose\nbool\nverbose logging, defaults to False\nFalse\n\n\ntrace_id\ntyping.Optional[str]\ntrace ID for logging, defaults to None\nNone\n\n\nmode\nMode\nexecution mode, defaults to LOCAL use BATCH for distributed execution\nMode.LOCAL"
  },
  {
    "objectID": "documentation/reference/ingestion.html#functions",
    "href": "documentation/reference/ingestion.html#functions",
    "title": "ingestion",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ningest\nIngest vectors into TileDB.\n\n\n\n\n\nvector_search.ingestion.ingest(index_type, array_uri, source_uri, source_type, *, config=None, namespace=None, size=-1, partitions=-1, copy_centroids_uri=None, training_sample_size=-1, workers=-1, verbose=False, trace_id=None, mode=Mode.LOCAL)\nIngest vectors into TileDB.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nindex_type\nstr\nType of vector index (FLAT, IVF_FLAT)\nrequired\n\n\narray_uri\nstr\nVector array URI\nrequired\n\n\nsource_uri\nstr\nData source URI\nrequired\n\n\nsource_type\nstr\nType of the source data\nrequired\n\n\nconfig\n\nconfig dictionary, defaults to None\nNone\n\n\nnamespace\ntyping.Optional[str]\nTileDB-Cloud namespace, defaults to None\nNone\n\n\nsize\nint\nNumber of input vectors, if not provided use the full size of the input dataset\n-1\n\n\npartitions\nint\nNumber of partitions to load the data with, if not provided, is auto-configured based on the dataset size\n-1\n\n\ncopy_centroids_uri\nstr\nTileDB array URI to copy centroids from, if not provided, centroids are build running kmeans\nNone\n\n\ntraining_sample_size\nint\nvector sample size to train centroids with, if not provided, is auto-configured based on the dataset size\n-1\n\n\nworkers\nint\nnumber of workers for vector ingestion, if not provided, is auto-configured based on the dataset size\n-1\n\n\nverbose\nbool\nverbose logging, defaults to False\nFalse\n\n\ntrace_id\ntyping.Optional[str]\ntrace ID for logging, defaults to None\nNone\n\n\nmode\nMode\nexecution mode, defaults to LOCAL use BATCH for distributed execution\nMode.LOCAL"
  },
  {
    "objectID": "documentation/reference/index.IVFFlatIndex.html",
    "href": "documentation/reference/index.IVFFlatIndex.html",
    "title": "index.IVFFlatIndex",
    "section": "",
    "text": "vector_search.index.IVFFlatIndex(self, uri, dtype)\nOpen a IVF Flat index\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nuri\n\nURI of datataset\nrequired\n\n\ndtype\nnumpy.dtype\ndatatype float32 or uint8\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nquery\nOpen a flat index\n\n\n\n\n\nvector_search.index.IVFFlatIndex.query(self, targets, k=10, nqueries=10, nthreads=8, nprobe=1)\nOpen a flat index\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntargets\nnumpy.ndarray\nND Array of query targets\nrequired\n\n\nk\n\nNumber of top results to return per target\n10\n\n\nnqueries\n\nNumber of queries\n10\n\n\nnthreads\n\nNumber of threads to use for queyr\n8\n\n\nnprobe\n\nnumber of probes\n1"
  },
  {
    "objectID": "documentation/reference/index.IVFFlatIndex.html#parameters",
    "href": "documentation/reference/index.IVFFlatIndex.html#parameters",
    "title": "index.IVFFlatIndex",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nuri\n\nURI of datataset\nrequired\n\n\ndtype\nnumpy.dtype\ndatatype float32 or uint8\nrequired"
  },
  {
    "objectID": "documentation/reference/index.IVFFlatIndex.html#methods",
    "href": "documentation/reference/index.IVFFlatIndex.html#methods",
    "title": "index.IVFFlatIndex",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nquery\nOpen a flat index\n\n\n\n\n\nvector_search.index.IVFFlatIndex.query(self, targets, k=10, nqueries=10, nthreads=8, nprobe=1)\nOpen a flat index\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntargets\nnumpy.ndarray\nND Array of query targets\nrequired\n\n\nk\n\nNumber of top results to return per target\n10\n\n\nnqueries\n\nNumber of queries\n10\n\n\nnthreads\n\nNumber of threads to use for queyr\n8\n\n\nnprobe\n\nnumber of probes\n1"
  },
  {
    "objectID": "documentation/reference/index.Index.html",
    "href": "documentation/reference/index.Index.html",
    "title": "index.Index",
    "section": "",
    "text": "vector_search.index.Index()\n\n\n\n\n\nName\nDescription\n\n\n\n\nquery\n\n\n\n\n\n\nvector_search.index.Index.query(self, targets, k=10, nqueries=10, nthreads=8, nprobe=1)"
  },
  {
    "objectID": "documentation/reference/index.Index.html#methods",
    "href": "documentation/reference/index.Index.html#methods",
    "title": "index.Index",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nquery\n\n\n\n\n\n\nvector_search.index.Index.query(self, targets, k=10, nqueries=10, nthreads=8, nprobe=1)"
  }
]